import ComplianceInfo from '../complianceInfo';
import configuration from '../../../../public/override/configuration.json';
import dydu from '../../../tools/dydu';

// All code is in PushrulesContext.tsx

// let rules = [];

// describe('addRule', () => {
//   test('adds a rule to the rules array', () => {
//     const rule = { conditions: [], kId: 123 };
//     rules = [rule];
//     expect(Array.isArray(rules)).toBeTruthy();
//     expect(rules.length).toBe(1);
//     expect(rules[0]).toEqual(rule);
//   });
// });
//
// describe('getExternalInfos', () => {
//   test('returns an object with external information', () => {
//     const now = new Date();
//     const externalInfos = getExternalInfos(now);
//     expect(typeof externalInfos).toBe('object');
//   });
// });
//
// describe('processRules', () => {
//   test('calls handlePush with the best compliant knowledge', () => {
//     const externInfos = {
//       durationSinceLastVisit: 0,
//       language: 'fr-FR',
//       now: 1679126160368,
//       pagesViewedCount: 1,
//       referrer: '',
//       usedKeywords: [],
//       visitCount: 1,
//       visitDuration: 0,
//       windowLocation: 'http://localhost:8080',
//     };
//     const handlePush = jest.fn();
//     const originalHandlePush = global.handlePush;
//     global.handlePush = handlePush;
//     const bestCompliance = {
//       getDelay: () => 10,
//       getIdleDelay: () => 20,
//       hasHigherPriorityThan: () => true,
//       isDelayValid: () => true,
//     };
//     jest.spyOn(bestCompliance, 'getDelay');
//     jest.spyOn(bestCompliance, 'getIdleDelay');
//     jest.spyOn(bestCompliance, 'hasHigherPriorityThan');
//     jest.spyOn(bestCompliance, 'isDelayValid');
//
//     processRules([], externInfos);
//
//     expect(bestCompliance.getDelay).toHaveBeenCalledTimes(0);
//     expect(bestCompliance.getIdleDelay).toHaveBeenCalledTimes(0);
//     expect(bestCompliance.hasHigherPriorityThan).toHaveBeenCalledTimes(0);
//     expect(bestCompliance.isDelayValid).toHaveBeenCalledTimes(0);
//
//     global.handlePush = originalHandlePush;
//   });
// });
//
// describe('INTERACTION_EVENTS', () => {
//   test('contains the expected events', () => {
//     expect(Array.isArray(INTERACTION_EVENTS)).toBeTruthy();
//     expect(INTERACTION_EVENTS).toContain('mousemove');
//     expect(INTERACTION_EVENTS).toContain('click');
//     expect(INTERACTION_EVENTS).toContain('keyup');
//   });
// });
//
// describe('processGoalPage', () => {
//   it('should call window.reword with the correct arguments when the context ID is present and the URL matches', () => {
//     // Arrange
//     const rule = {
//       bgpId: '123',
//       conditions: [{ param_1: 'https://example.com' }],
//     };
//     const externInfos = {
//       windowLocation: 'https://example.com',
//     };
//     const expectedRewordArg = '_goalpage_:123';
//
//     // Mock dydu.getContextId to return a non-empty string
//     dydu.getContextId = jest.fn().mockReturnValue('context-id');
//
//     // Spy on window.reword to check if it is called with the expected argument
//     window.reword = jest.fn();
//
//     // Act
//     processGoalPage(rule, externInfos);
//
//     // Assert
//     expect(dydu.getContextId).toHaveBeenCalled();
//     expect(window.reword).toHaveBeenCalledWith(expectedRewordArg, { hide: true });
//   });
//
//   it('should not call window.reword when the context ID is not present', () => {
//     // Arrange
//     const rule = {
//       bgpId: '123',
//       conditions: [{ param_1: 'https://example.com' }],
//     };
//     const externInfos = {
//       windowLocation: 'https://example.com',
//     };
//
//     // Mock dydu.getContextId to return an empty string
//     dydu.getContextId = jest.fn().mockReturnValue('');
//
//     // Spy on window.reword to check if it is not called
//     window.reword = jest.fn();
//
//     // Act
//     processGoalPage(rule, externInfos);
//
//     // Assert
//     expect(dydu.getContextId).toHaveBeenCalled();
//     expect(window.reword).not.toHaveBeenCalled();
//   });
//
//   it('should not call window.reword when the URL does not match', () => {
//     // Arrange
//     const rule = {
//       bgpId: '123',
//       conditions: [{ param_1: 'https://example.com' }],
//     };
//     const externInfos = {
//       windowLocation: 'https://other-example.com',
//     };
//
//     // Mock dydu.getContextId to return a non-empty string
//     dydu.getContextId = jest.fn().mockReturnValue('context-id');
//
//     // Spy on window.reword to check if it is not called
//     window.reword = jest.fn();
//
//     // Act
//     processGoalPage(rule, externInfos);
//
//     // Assert
//     expect(dydu.getContextId).toHaveBeenCalled();
//     expect(window.reword).not.toHaveBeenCalled();
//   });
// });
//
// describe('getChatboxNodeElement', () => {
//   it('should return null if chatboxNodeElement is not defined', () => {
//     expect(getChatboxNodeElement()).toBeNull();
//   });
//
//   it('should return the chatbox node element if it has been defined', () => {
//     const mockChatboxNode = document.createElement('div');
//     mockChatboxNode.setAttribute('id', 'mock-chatbox-node');
//     document.body.appendChild(mockChatboxNode);
//     configuration.root = 'mock-chatbox-node';
//     expect(getChatboxNodeElement()).toEqual(mockChatboxNode);
//   });
// });
//
// describe('handlePush', () => {
//   let originalTimeout;
//
//   beforeEach(() => {
//     originalTimeout = jest.setTimeout;
//     jest.setTimeout(10000); // Increase timeout for this test suite, since some tests use setTimeout
//   });
//
//   afterEach(() => {
//     jest.setTimeout(originalTimeout);
//   });
//
//   it('calls pushKnowledge with delayRuleId immediately if delay is 0', () => {
//     // Arrange
//     const delay = 0;
//     const delayRuleId = 'rule-id-1';
//     const idleDelay = 30;
//     const idleDelayRuleId = 'rule-id-2';
//     const pushKnowledge = jest.fn();
//     const interaction = jest.fn();
//     const currentTimer = { counter: null, duration: null };
//
//     // Act
//     handlePush(delay, delayRuleId, idleDelay, idleDelayRuleId, pushKnowledge, interaction, currentTimer);
//
//     // Assert
//     expect(pushKnowledge).not.toHaveBeenCalled();
//     expect(interaction).not.toHaveBeenCalled();
//     expect(currentTimer.counter).toBeNull();
//     expect(currentTimer.duration).toBeNull();
//   });
//
//   it('calls pushKnowledge with idleDelayRuleId immediately if idleDelay is 0', () => {
//     // Arrange
//     const delay = 30;
//     const delayRuleId = 'rule-id-1';
//     const idleDelay = 0;
//     const idleDelayRuleId = 'rule-id-2';
//     const pushKnowledge = jest.fn();
//     const interaction = jest.fn();
//     const currentTimer = { counter: null, duration: null };
//
//     // Act
//     handlePush(delay, delayRuleId, idleDelay, idleDelayRuleId, pushKnowledge, interaction, currentTimer);
//
//     // Assert
//     expect(pushKnowledge).not.toHaveBeenCalled();
//     expect(interaction).not.toHaveBeenCalled();
//     expect(currentTimer.counter).toBeNull();
//     expect(currentTimer.duration).toBeNull();
//   });
// });
//
// describe('interaction', () => {
//   // Mock setTimeout and clearTimeout
//   jest.useFakeTimers();
//
//   // Define a mock for the pushKnowledge function
//   const pushKnowledge = jest.fn();
//
//   beforeEach(() => {
//     // Reset the mock before each test
//     pushKnowledge.mockReset();
//   });
//
//   it('should call pushKnowledge with the correct ruleId after the specified duration', () => {
//     const ruleId = '123';
//     const duration = 1000;
//
//     // Set up the mock implementation for pushKnowledge
//     pushKnowledge.mockImplementation((id) => {
//       return ruleId;
//     });
//
//     // Call the interaction function with the ruleId and duration
//     interaction(ruleId, duration);
//
//     pushKnowledge(ruleId);
//
//     // Fast-forward time by the specified duration
//     jest.advanceTimersByTime(duration);
//
//     // Assert that pushKnowledge was called with the correct ruleId
//     expect(pushKnowledge).toHaveBeenCalledWith(ruleId);
//   });
//
//   it('should execute the correct behavior when pushKnowledge is called', () => {
//     const ruleId = '456';
//     const duration = 500;
//
//     // Set up the mock implementation for pushKnowledge
//     pushKnowledge.mockImplementation((id) => {
//       console.log(`pushKnowledge called with ruleId: ${id}`);
//       console.log('Executing behavior...');
//       // Do some behavior here...
//     });
//
//     // Call the interaction function with the ruleId and duration
//     interaction(ruleId, duration);
//
//     pushKnowledge(ruleId);
//
//     // Fast-forward time by the specified duration
//     jest.advanceTimersByTime(duration);
//
//     // Assert that pushKnowledge was called with the correct ruleId
//     expect(pushKnowledge).toHaveBeenCalledWith(ruleId);
//   });
// });
//
// describe('computeChildrenCompliance', () => {
//   it('should return an empty ComplianceInfo object if condition has no children', () => {
//     const condition = { children: null };
//     const ruleId = '123';
//     const externInfos = {};
//
//     const result = computeChildrenCompliance(condition, ruleId, externInfos);
//
//     expect(JSON.stringify(result)).toEqual(JSON.stringify(new ComplianceInfo({ delay: 0, idleDelay: -1 })));
//   });
// });
// describe('computeConditionCompliance', () => {
//   it('should compute the compliance for a condition', () => {
//     const condition = {
//       type: 'TimeSinceLastVisit',
//       operator: 'LessThan',
//       value: '30',
//     };
//     const ruleId = 1;
//     const externInfos = {};
//     const childCompliance = new ComplianceInfo({ delay: 1000 });
//     const result = computeConditionCompliance(condition, ruleId, externInfos, childCompliance);
//
//     expect(JSON.stringify(result)).toEqual(JSON.stringify(new ComplianceInfo({ delay: -1, idleDelay: -1 })));
//   });
//
//   it('should return an empty compliance if the child compliance delay is not valid', () => {
//     const condition = {
//       type: 'TimeSinceLastVisit',
//       operator: 'LessThan',
//       value: '30',
//     };
//     const ruleId = 1;
//     const externInfos = {};
//     const childCompliance = new ComplianceInfo({ delay: -1 });
//     const result = computeConditionCompliance(condition, ruleId, externInfos, childCompliance);
//     expect(JSON.stringify(result)).toEqual(JSON.stringify(new ComplianceInfo()));
//   });
// });
//
// describe('processConditionCompliance', () => {
//   jest.mock('../pushService', () => ({
//     rulesDefinition: [
//       {
//         name: 'TimeSinceLastVisit',
//         processDelays: jest.fn(() => ({ delay: 1000 })),
//       },
//     ],
//   }));
//
//   it('should process the compliance for a condition', () => {
//     const condition = {
//       type: 'TimeSinceLastVisit',
//       operator: 'LessThan',
//       value: '30',
//     };
//     const ruleId = 1;
//     const externInfos = {};
//     const result = processConditionCompliance(condition, ruleId, externInfos);
//     expect(JSON.stringify(result)).toEqual(JSON.stringify(new ComplianceInfo({ delay: -1, idleDelay: -1 })));
//   });
//
//   it('should return an empty compliance if the condition type is not found', () => {
//     const condition = {
//       type: 'InvalidCondition',
//       operator: 'LessThan',
//       value: '30',
//     };
//     const ruleId = 1;
//     const externInfos = {};
//     const result = processConditionCompliance(condition, ruleId, externInfos);
//     expect(JSON.stringify(result)).toEqual(JSON.stringify(new ComplianceInfo()));
//   });
// });
//
// describe('pushKnowledge', () => {
//   const mockSession = {
//     names: {
//       pushruleTrigger: 'testTrigger',
//     },
//     set: jest.fn(),
//     get: jest.fn(),
//   };
//   const mockWindow = {
//     dydu: {
//       ui: {
//         toggle: jest.fn(),
//       },
//     },
//     reword: jest.fn(),
//   };
//
//   beforeEach(() => {
//     mockSession.set.mockReset();
//     mockSession.get.mockReset();
//     mockWindow.dydu.ui.toggle.mockReset();
//     mockWindow.reword.mockReset();
//   });
//
//   let canPush = true;
//
//   it('should push knowledge if conditions are met', () => {
//     global.Session = mockSession;
//
//     const ruleId = '123';
//     const sessionKey = 'testTrigger_123';
//     mockSession.get.mockReturnValue(undefined);
//
//     pushKnowledge(ruleId);
//
//     expect(canPush).toBeTruthy();
//   });
//
//   it('should not push knowledge if session already set for the rule', () => {
//     global.Session = mockSession;
//
//     const ruleId = '123';
//     const sessionKey = 'testTrigger_123';
//     mockSession.get.mockReturnValue(ruleId);
//
//     pushKnowledge(ruleId);
//
//     expect(mockWindow.dydu.ui.toggle).not.toHaveBeenCalled();
//     expect(mockWindow.reword).not.toHaveBeenCalled();
//     expect(mockSession.set).not.toHaveBeenCalled();
//     expect(canPush).toBeTruthy();
//   });
//
//   it('should not push knowledge if canPush is false', () => {
//     global.Session = mockSession;
//
//     const ruleId = '123';
//     const sessionKey = 'testTrigger_123';
//     mockSession.get.mockReturnValue(undefined);
//     canPush = false;
//
//     pushKnowledge(ruleId);
//
//     expect(mockWindow.dydu.ui.toggle).not.toHaveBeenCalled();
//     expect(mockWindow.reword).not.toHaveBeenCalled();
//     expect(mockSession.set).not.toHaveBeenCalled();
//     expect(canPush).toBeFalsy();
//   });
// });
//
// describe('urlCompliant', () => {
//   it('returns true for matching pattern and URL', () => {
//     const pattern = 'https://example.com';
//     const url = 'https://example.com';
//     expect(urlCompliant(pattern, url)).toBe(true);
//   });
//
//   it('returns false for non-matching pattern and URL', () => {
//     const pattern = 'https://example.com';
//     const url = 'https://google.com';
//     expect(urlCompliant(pattern, url)).toBe(false);
//   });
//
//   it('returns true for pattern ending with % and matching URL', () => {
//     const pattern = 'https://example.com/%';
//     const url = 'https://example.com/path';
//     expect(urlCompliant(pattern, url)).toBe(true);
//   });
//
//   it('returns false for pattern ending with % and non-matching URL', () => {
//     const pattern = 'https://example.com/%';
//     const url = 'https://google.com/path';
//     expect(urlCompliant(pattern, url)).toBe(false);
//   });
//
//   it('returns false and catches error for invalid pattern', () => {
//     const pattern = null;
//     const url = 'https://example.com';
//     expect(urlCompliant(pattern, url)).toBe(false);
//   });
// });
