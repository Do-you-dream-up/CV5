---

stages:
  - preprod
  - prod
  - build
  - publish_preprod
  - publish_prod
  - replace
  - mirror
  - release

variables:
  STORE_PATH: https://nexus.doyoudreamup.com/repository/front_artefacts/chatbot/bliss
  KEY_TO_REPLACE: "<<<ASSET_FULL_URL_TO_REPLACE>>>"

preprod:
  stage: preprod
  image: node:lts-alpine3.14
  before_script:
    - echo "//nexus.doyoudreamup.com/repository/npm-private/:_auth=${NEXUS_NPM_TOKEN}" >> .npmrc
    - cat .npmrc
    - npm ci --cache .npm --prefer-offline
    - npm run buildPreprod
  script:
    - apk update
    - apk add --no-cache rsync python3-dev py3-pip gcc musl-dev libffi-dev rust cargo openssl-dev openssh-client
    - pip3 --no-cache-dir install ansible
    - chmod 0700 .ssh
    - chmod 0600 .ssh/id_ed25519
    - ansible-playbook --verbose --inventory hosts.yml deliverPreprod.yml
  only:
    refs:
      - /project\/.*/

prod:
  stage: prod
  image: node:lts-alpine3.14
  when: manual
  before_script:
    - echo "//nexus.doyoudreamup.com/repository/npm-private/:_auth=${NEXUS_NPM_TOKEN}" >> .npmrc
    - npm ci --cache .npm --prefer-offline
    - npm run buildProd
  script:
    - apk update
    - apk add --no-cache rsync python3-dev py3-pip gcc musl-dev libffi-dev rust cargo openssl-dev openssh-client
    - pip3 --no-cache-dir install ansible
    - chmod 0700 .ssh
    - chmod 0600 .ssh/id_ed25519
    - ansible-playbook --verbose --inventory hosts.yml deliverProd.yml
  only:
    refs:
      - /project\/.*/

include:
  - project: 'main-solution/build-and-tools/ci-cd-templates'
    file:
      - 'node/common.gitlab-ci.yml'
      - 'node/version-management.gitlab-ci.yml'

build_base:prod:
  stage: build
  image: docker-registry.doyoudreamup.com/devops/build/node-build-tools:latest
  tags:
    - chatbot
  script:
    - echo "//nexus.doyoudreamup.com/repository/npm-private/:_auth=${NEXUS_NPM_TOKEN}" >> .npmrc
    - npm ci --cache .npm --prefer-offline
    - export ASSET_FULL_URL="${KEY_TO_REPLACE}"
    - npm run buildCi
    - |
      cat > build/metadata.txt << EOF
      DATE=$(date +"%y%m%d_%H%M")
      BUILD_TARGET=$BUILD_TARGET
      JOB_ID=$CI_JOB_ID
      CHATBOX_GIT_COMMIT=$CI_COMMIT_SHORT_SHA
      CHATBOX_GIT_REF=$CI_COMMIT_REF_NAME
      EOF
  variables:
    BUILD_TARGET: prod
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm
  only:
    - branches
  except:
    variables:
      - $DYDUBOX_TRIGGER == "true"
  artifacts:
    expire_in: 1h
    paths:
      - build/**

build_base:preprod:
  extends:
    - build_base:prod
  variables:
    BUILD_TARGET: preprod

push_base:preprod:
  image: docker-registry.dydu-priv.com/devops/build/gitlab-docker:latest
  stage: publish_preprod
  dependencies: ["build_base:preprod"]
  before_script:
      - apk add curl zip
      - "export VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]')"
      - >
        case $CI_COMMIT_REF_NAME in
        master) export LATEST="latest" ;;
        development) VERSION=$VERSION-SNAPSHOT ; export LATEST="latest-SNAPSHOT" ;;
        esac
      - echo "Will publish version $VERSION"
      - /helper.sh loginGit
  script:
    - ZIP_FILE="base_${BUILD_TARGET}_${VERSION}.zip"
    - ZIP_FILE_LATEST="base_${BUILD_TARGET}_${LATEST}.zip"
    - zip -r $ZIP_FILE build
    - cp $ZIP_FILE $ZIP_FILE_LATEST
    - echo "$ZIP_FILE $STORE_PATH/$BUILD_TARGET/$ZIP_FILE"
    - echo "$ZIP_FILE_LATEST $STORE_PATH/$BUILD_TARGET/$ZIP_FILE_LATEST"
    - git fetch --all --tags
    - if [[ ! $(git tag -l "ci_$VERSION") ]]; then git tag -f ci_$VERSION ; git push --tags --force origin ci_$VERSION ; fi
    - 'curl -v -u "${NEXUS_REGISTRY_USER}:${NEXUS_REGISTRY_PASSWORD}" --upload-file "${ZIP_FILE}" ${STORE_PATH}/${BUILD_TARGET}/${ZIP_FILE}'
    - 'curl -v -u "${NEXUS_REGISTRY_USER}:${NEXUS_REGISTRY_PASSWORD}" --upload-file "${ZIP_FILE_LATEST}" ${STORE_PATH}/${BUILD_TARGET}/${ZIP_FILE_LATEST}'
  variables:
    BUILD_TARGET: preprod
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^(master).*/ && $CI_COMMIT_MESSAGE =~ /^ci\(release\).*/'
      when: on_success
    - if: '$CI_COMMIT_REF_NAME =~ /^(development).*/'
      when: on_success
    - when: never
  except:
    variables:
      - $DYDUBOX_TRIGGER == "true"

push_base:prod:
  stage: publish_prod
  extends:
    - push_base:preprod
  dependencies: ["build_base:prod"]
  variables:
    BUILD_TARGET: prod
  rules:
    - if: "$CI_COMMIT_REF_NAME =~ /^(master).*/ && $CI_COMMIT_MESSAGE =~ /^ci\\(release\\).*/"
      when: manual
    - if: '$CI_COMMIT_REF_NAME =~ /^(development).*/'
    - when: never

mirror:
  stage: mirror
  image: docker-registry.dydu-priv.com/devops/build/gitlab-ansible:latest
  before_script:
    - 'curl --header "PRIVATE-TOKEN: $GITLAB_RUNNER_TOKEN" -L https://gitlab.ci.dydu-priv.com/api/v4/projects/102/repository/files/helper.sh/raw?ref=master --output /helper.sh'
    - chmod +x /helper.sh
  script:
    - '/helper.sh loginGit'
    - 'ssh-keyscan github.com >> ~/.ssh/known_hosts'
    - 'git clone git@github.com:Do-you-dream-up/CV5.git repopub'
    - 'cd repopub'
    - 'git remote add this ../.'
    - 'git fetch this --tags'
    - 'git merge --no-edit --allow-unrelated-histories this/test-cicd-bliss'
    - 'git remote remove this'
    - 'git push'
  rules:
    - if: "$CI_COMMIT_REF_NAME =~ /^(master).*/ && $CI_COMMIT_MESSAGE =~ /^ci\\(release\\).*/"

dydubox:
  stage: replace
  image: alpine
  script:
    - apk add curl zip
    - ZIP_FILE="base_${BUILD_TARGET}_${CI_COMMIT_REF_NAME}.zip"
    - export ASSET_FULL_URL="$CDN_PUBLIC_URL/$BUILD_TARGET/$BOT_UUID/$CONFIGURATION_UUID"
    - echo "Public path url $ASSET_FULL_URL"
    - 'curl -v -u "${NEXUS_REGISTRY_USER}:${NEXUS_REGISTRY_PASSWORD}" --output "${ZIP_FILE}" ${STORE_PATH}/${BUILD_TARGET}/${ZIP_FILE}'
    - unzip $ZIP_FILE
    - ls -la
    - find build/ -type f -print0 | xargs -0 sed -i "s@$KEY_TO_REPLACE@$ASSET_FULL_URL@g"
    - |
      cat > build/metadata.txt << EOF
      DATE=$(date +"%y%m%d_%H%M")
      BOT_UUID=$BOT_UUID
      CONFIGURATION_UUID=$CONFIGURATION_UUID
      CDN_PUBLIC_URL=$CDN_PUBLIC_URL
      BUILD_TARGET=$BUILD_TARGET
      JOB_ID=$CI_JOB_ID
      CHATBOX_GIT_COMMIT=$CI_COMMIT_SHORT_SHA
      CHATBOX_GIT_REF=$CI_COMMIT_REF_NAME
      ASSET_FULL_URL=$ASSET_FULL_URL
      EOF
    - mv build $CONFIGURATION_UUID
  only:
    variables:
      - $DYDUBOX_TRIGGER == "true" && $CONFIGURATION_UUID && $BOT_UUID && $BUILD_TARGET && $CDN_PUBLIC_URL
  artifacts:
    expire_in: 1h
    paths:
      - $CONFIGURATION_UUID/**

...
